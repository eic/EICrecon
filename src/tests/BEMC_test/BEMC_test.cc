// Copyright 2022, David Lawrence
// Subject to the terms in the LICENSE file found in the top-level directory.
//

#include <JANA/JEventProcessorSequentialRoot.h>
#include <TH1D.h>
#include <TFile.h>

#include <edm4hep/SimCalorimeterHit.h>
#include <edm4hep/RawCalorimeterHit.h>
#include "detectors/BEMC/RawCalorimeterHit_factory_EcalBarrelSciGlassRawHits.h"


/// This class is used to demonstrate getting data objects that
/// come from the event source as well as ones generated by a
/// JANA algorithm. The "Eraw" histogram is filled using the
/// energy from the edm4hep::SimCalorimeterHit objects in the
/// EcalBarrelHits collection. The "Edigi" histogram is filled
/// using the amplitude produced by the generic CalorimeterHitDigi
/// algorithm in the form of BEMCRawCalorimeterHit objects.
class BEMC_testProcessor: public JEventProcessorSequentialRoot {
private:

    // Data objects we will need from JANA
    PrefetchT<edm4hep::SimCalorimeterHit> rawhits   = {this, "EcalBarrelHits"};
    PrefetchT<edm4hep::RawCalorimeterHit>      digihits  = {this};

    // Histograms
    TH1D* hEraw  = nullptr;
    TH1D *hEdigi = nullptr ;

public:
    BEMC_testProcessor() { SetTypeName(NAME_OF_THIS); }

    void InitWithGlobalRootLock() override {

        // Create histograms
        hEraw  = new TH1D("Eraw",  "BEMC hit energy (raw)",  100, 0, 0.075);
        hEdigi = new TH1D("Edigi", "BEMC hit energy (digi)", 200, 0, 2000.0);
    }

    void ProcessSequential(const std::shared_ptr<const JEvent>& event) override {

        // Fill histograms
        for( auto hit : rawhits()  ) hEraw->Fill(  hit->getEnergy());
        for( auto hit : digihits() ) hEdigi->Fill( hit->getAmplitude());
    }

    void FinishWithGlobalRootLock() override {}
};

// The following just makes this a JANA plugin
extern "C" {
    void InitPlugin(JApplication *app) {
        InitJANAPlugin(app);
        app->Add(new BEMC_testProcessor);
    }
}
