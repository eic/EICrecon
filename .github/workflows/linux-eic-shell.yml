name: Build against eic-shell

on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - CC: gcc
            CXX: g++
            CMAKE_BUILD_TYPE: Release
          - CC: clang
            CXX: clang++
            CMAKE_BUILD_TYPE: Debug
            CXXFLAGS: -fprofile-instr-generate -fcoverage-mapping
          - CC: gcc
            CXX: g++
            CMAKE_BUILD_TYPE: Debug
    steps:
    - uses: actions/checkout@v3
    - name: Prepare ccache timestamp
      id: ccache_cache_timestamp
      run: |
        echo "timestamp=$(date --iso-8601=minutes)" >> $GITHUB_OUTPUT
    - name: Retrieve ccache cache files
      uses: actions/cache@v3
      with:
        path: .ccache
        key: ccache-${{ matrix.CC }}-${{ matrix.CMAKE_BUILD_TYPE }}-${{ github.ref_name }}-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
        restore-keys: |
             ccache-${{ matrix.CC }}-${{ matrix.CMAKE_BUILD_TYPE }}-${{ github.ref_name }}-
             ccache-${{ matrix.CC }}-${{ matrix.CMAKE_BUILD_TYPE }}-
             ccache-${{ matrix.CC }}-
             ccache-
    - name: Configure ccache
      run: |
        mkdir -p ~/.ccache/
        echo "cache_dir=${{ github.workspace }}/.ccache" > ~/.ccache/ccache.conf
        echo "max_size=500MB" >> ~/.ccache/ccache.conf
        echo "compression=true" >> ~/.ccache/ccache.conf
    - uses: cvmfs-contrib/github-action-cvmfs@v3
    - name: Build and install
      uses: eic/run-cvmfs-osg-eic-shell@main
      with:
        platform-release: "jug_xl:nightly"
        run: |
          # install this repo
          CC="${{ matrix.CC }}" CXX="${{ matrix.CXX }}" CXXFLAGS="${{ matrix.CXXFLAGS }}" cmake -B build -S . -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_BUILD_TYPE=${{ matrix.CMAKE_BUILD_TYPE }}
          cmake --build build -- -j 2 install
    - name: Run testsuite
      uses: eic/run-cvmfs-osg-eic-shell@main
      with:
        platform-release: "jug_xl:nightly"
        run: |
          (cd build && ctest -V)
    - uses: actions/upload-artifact@v3
      with:
        name: install-${{ matrix.CC }}-eic-shell-${{ matrix.CMAKE_BUILD_TYPE }}
        path: |
          .
          !src/
          !build/
          !apt_cache/
          !.git/
          !.ccache/
        if-no-files-found: error
    - uses: actions/upload-artifact@v3
      with:
        name: build-${{ matrix.CC }}-eic-shell-${{ matrix.CMAKE_BUILD_TYPE }}
        path: |
          build/
        if-no-files-found: error

  clang-tidy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - run: echo "FETCH_DEPTH=$(( ${{ github.event.pull_request.commits }} + 1 ))" >> "${GITHUB_ENV}"
    - uses: actions/checkout@v3
      with:
        fetch-depth: ${{ env.FETCH_DEPTH }}
    - uses: cvmfs-contrib/github-action-cvmfs@v3
    - uses: actions/download-artifact@v3
      with:
        name: build-clang-eic-shell-Debug
        path: build/
    - uses: eic/run-cvmfs-osg-eic-shell@main
      if: ${{ github.event_name == 'pull_request'}}
      with:
        platform-release: "jug_xl:nightly"
        run: |
          git diff ${{github.event.pull_request.base.sha}} | clang-tidy-diff -p 1 -path build -quiet -export-fixes clang_tidy_fixes.yml -extra-arg='-std=c++17' -clang-tidy-binary run-clang-tidy
    - uses: eic/run-cvmfs-osg-eic-shell@main
      if: ${{ github.event_name == 'push'}}
      with:
        platform-release: "jug_xl:nightly"
        run: |
          run-clang-tidy -p build -export-fixes clang_tidy_fixes.yml -extra-arg='-std=c++17'
    - uses: actions/upload-artifact@v3
      with:
        name: clang-tidy-fixes.yml
        path: clang_tidy_fixes.yml

  llvm-cov:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - run: echo "FETCH_DEPTH=$(( ${{ github.event.pull_request.commits }} + 1 ))" >> "${GITHUB_ENV}"
    - uses: actions/checkout@v3
      with:
        fetch-depth: ${{ env.FETCH_DEPTH }}
    - uses: actions/download-artifact@v3
      with:
        name: build-clang-eic-shell-Debug
        path: build/
    - run: sudo apt-get install -y llvm-15
    - run: |
        cd build
        llvm-profdata-15 merge -sparse src/tests/algorithms_test/algorithms_test.profraw -o src/tests/algorithms_test/algorithms_test.profdata
        llvm-cov-15 report src/algorithms/calorimetry/algorithms_calorimetry.so -instr-profile=src/tests/algorithms_test/algorithms_test.profdata
        llvm-cov-15 show src/algorithms/calorimetry/algorithms_calorimetry.so -instr-profile=src/tests/algorithms_test/algorithms_test.profdata -output-dir=codecov_report -format=html
    - uses: actions/upload-artifact@v3
      with:
        name: codecov_report
        path: codecov_report/
