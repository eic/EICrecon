name: Build against eic-shell

on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
  merge_group:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: ${{ github.ref_name != 'main' }}

env:
  ASAN_OPTIONS: suppressions=${{ github.workspace }}/.github/asan.supp:malloc_context_size=20:detect_leaks=1:verify_asan_link_order=0:detect_stack_use_after_return=1:detect_odr_violation=0:new_delete_type_mismatch=0
  LSAN_OPTIONS: suppressions=${{ github.workspace }}/.github/lsan.supp:exitcode=0

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - CC: gcc
            CXX: g++
            CMAKE_BUILD_TYPE: Release
          - CC: gcc
            CXX: g++
            CMAKE_BUILD_TYPE: Debug
          - CC: clang
            CXX: clang++
            CMAKE_BUILD_TYPE: Release
          - CC: clang
            CXX: clang++
            CMAKE_BUILD_TYPE: Debug
            CXXFLAGS: -fprofile-instr-generate -fcoverage-mapping
    steps:
    - uses: actions/checkout@v3
    - name: Prepare ccache timestamp
      id: ccache_cache_timestamp
      run: |
        echo "timestamp=$(date --iso-8601=minutes)" >> $GITHUB_OUTPUT
    - name: Retrieve ccache cache files
      uses: actions/cache@v3
      with:
        path: .ccache
        key: ccache-${{ matrix.CC }}-${{ matrix.CMAKE_BUILD_TYPE }}-${{ github.ref_name }}-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
        restore-keys: |
             ccache-${{ matrix.CC }}-${{ matrix.CMAKE_BUILD_TYPE }}-${{ github.ref_name }}-
             ccache-${{ matrix.CC }}-${{ matrix.CMAKE_BUILD_TYPE }}-
             ccache-${{ matrix.CC }}-
             ccache-
    - name: Configure ccache
      run: |
        mkdir -p ~/.ccache/
        echo "cache_dir=${{ github.workspace }}/.ccache" > ~/.ccache/ccache.conf
        echo "max_size=500MB" >> ~/.ccache/ccache.conf
        echo "compression=true" >> ~/.ccache/ccache.conf
    - uses: cvmfs-contrib/github-action-cvmfs@v3
    - name: Build and install
      uses: eic/run-cvmfs-osg-eic-shell@main
      with:
        platform-release: "jug_xl:nightly"
        run: |
          # install this repo
          CC="${{ matrix.CC }}" CXX="${{ matrix.CXX }}" CXXFLAGS="${{ matrix.CXXFLAGS }}" cmake -B build -S . -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_BUILD_TYPE=${{ matrix.CMAKE_BUILD_TYPE }} -DUSE_ASAN=ON -DUSE_TSAN=OFF -DUSE_UBSAN=OFF
          cmake --build build -- -j 2 install
    - name: Run testsuite
      uses: eic/run-cvmfs-osg-eic-shell@main
      with:
        platform-release: "jug_xl:nightly"
        run: |
          (cd build && ctest -V)
    - uses: actions/upload-artifact@v3
      with:
        name: install-${{ matrix.CC }}-eic-shell-${{ matrix.CMAKE_BUILD_TYPE }}
        path: |
          .
          !src/
          !build/
          !apt_cache/
          !.git/
          !.ccache/
        if-no-files-found: error
    - uses: actions/upload-artifact@v3
      with:
        name: build-${{ matrix.CC }}-eic-shell-${{ matrix.CMAKE_BUILD_TYPE }}
        path: |
          build/
        if-no-files-found: error

  clang-tidy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - run: echo "FETCH_DEPTH=$(( ${{ github.event.pull_request.commits }} + 1 ))" >> "${GITHUB_ENV}"
    - uses: actions/checkout@v3
      with:
        fetch-depth: ${{ env.FETCH_DEPTH }}
    - uses: cvmfs-contrib/github-action-cvmfs@v3
    - uses: actions/download-artifact@v3
      with:
        name: build-clang-eic-shell-Debug
        path: build/
    - uses: eic/run-cvmfs-osg-eic-shell@main
      if: ${{ github.event_name == 'pull_request' }}
      with:
        platform-release: "jug_xl:nightly"
        run: |
          git diff ${{github.event.pull_request.base.sha}} | clang-tidy-diff -p 1 -path build -quiet -export-fixes clang_tidy_fixes.yml -extra-arg='-std=c++17' -checks='-*,bugprone-*,-bugprone-narrowing-conversions' -clang-tidy-binary run-clang-tidy
    - uses: eic/run-cvmfs-osg-eic-shell@main
      if: ${{ github.event_name == 'push' }}
      with:
        platform-release: "jug_xl:nightly"
        run: |
          run-clang-tidy -p build -export-fixes clang_tidy_fixes.yml -extra-arg='-std=c++17'
    - uses: actions/upload-artifact@v3
      with:
        name: clang-tidy-fixes.yml
        path: clang_tidy_fixes.yml
    - uses: platisd/clang-tidy-pr-comments@1.4.0
      if: ${{ github.event_name == 'pull_request' }}
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        clang_tidy_fixes: clang_tidy_fixes.yml
        request_changes: true
        suggestions_per_comment: 10

  llvm-cov:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      statuses: write
    steps:
    - uses: actions/checkout@v3
    - uses: actions/download-artifact@v3
      with:
        name: build-clang-eic-shell-Debug
        path: build/
    - run: sudo apt-get update
    - run: sudo apt-get install -y llvm-15 jq
    - name: llvm-cov
      run: |
        cd build
        COV_OPTIONS=('--ignore-filename-regex=usr/local/include/eigen3.+')
        llvm-profdata-15 merge -sparse src/tests/algorithms_test/algorithms_test.profraw \
          -o src/tests/algorithms_test/algorithms_test.profdata
        LIB_PATHS=()
        for LIB_NAME in algorithms_calorimetry algorithms_digi algorithms_pid algorithms_reco algorithms_tracking; do
          LIB_PATH="$(find src/ -type f -name "$LIB_NAME.so")"
          LIB_PATHS+=("$LIB_PATH")
          llvm-cov-15 report $LIB_PATH \
            -instr-profile=src/tests/algorithms_test/algorithms_test.profdata \
            "${COV_OPTIONS[@]}"
          COV_PERCENT=$(llvm-cov-15 export $LIB_PATH \
            -instr-profile=src/tests/algorithms_test/algorithms_test.profdata \
            "${COV_OPTIONS[@]}" | jq '.data | map(.totals.regions.percent) | .[]' | xargs printf "%.1f\n")
          if [ "${{ github.event.pull_request.head.repo.full_name }}" = "${{ github.repository }}" ]; then
            curl --request POST \
              --url https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha || github.sha }} \
              --header "Accept: application/vnd.github+json" \
              --header "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              --header "X-GitHub-Api-Version: 2022-11-28" \
              --data '{
                "state": "success",
                "context": "Code coverage ('$LIB_NAME') - '$COV_PERCENT'%"
                }' \
              --fail-with-body
          else
            echo 'PR submitted from a fork. Skipping posting the "Code coverage ('$LIB_NAME') - '$COV_PERCENT'%" status.'
          fi
        done
        llvm-cov-15 show "${LIB_PATHS[@]/#/--object=}" \
          -instr-profile=src/tests/algorithms_test/algorithms_test.profdata \
          -output-dir=codecov_report -format=html \
          "${COV_OPTIONS[@]}"
    - uses: actions/upload-artifact@v3
      with:
        name: codecov_report
        path: build/codecov_report/

  ddsim-gun:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        particle: [pi, e]
        detector_config: [brycecanyon, craterlake]
    steps:
    - uses: cvmfs-contrib/github-action-cvmfs@v3
    - name: Get detector info
      id: detector_info
      run: |
        grep epic/nightly /cvmfs/singularity.opensciencegrid.org/eicweb/jug_xl\:nightly/etc/jug_info | sed 's/.*: .*-\(.*\)/hash=\1/g' >> $GITHUB_OUTPUT
    - name: Retrieve simulation files
      id: retrieve_simulation_files
      uses: actions/cache@v3
      with:
        path: sim_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4hep.root
        key: sim_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4hep.root-${{ steps.detector_info.outputs.hash }}
    - name: Produce simulation files
      uses: eic/run-cvmfs-osg-eic-shell@main
      if: steps.retrieve_simulation_files.outputs.cache-hit != 'true'
      with:
        platform-release: "jug_xl:nightly"
        setup: /opt/detector/setup.sh
        run: |
          ddsim --compactFile ${DETECTOR_PATH}/${DETECTOR}_${{ matrix.detector_config }}.xml -G --random.seed 1 --gun.particle "${{ matrix.particle }}-" --gun.momentumMin "1*GeV" --gun.momentumMax "20*GeV" --gun.distribution "uniform" -N 100 --outputFile sim_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4hep.root -v WARNING
    - uses: actions/upload-artifact@v3
      with:
        name: sim_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4hep.root
        path: sim_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4hep.root
        if-no-files-found: error

  ddsim-gun-EcalLumiSpec:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        particle: [e]
        detector_config: [ip6_extended]
    steps:
    - uses: actions/checkout@v3
    - uses: cvmfs-contrib/github-action-cvmfs@v3
    - name: Get detector info
      id: detector_info
      run: |
        grep epic/nightly /cvmfs/singularity.opensciencegrid.org/eicweb/jug_xl\:nightly/etc/jug_info | sed 's/.*: .*-\(.*\)/hash=\1/g' >> $GITHUB_OUTPUT
    - name: Retrieve simulation files
      id: retrieve_simulation_files
      uses: actions/cache@v3
      with:
        path: sim_${{ matrix.particle }}_EcalLumiSpec_${{ matrix.detector_config }}.edm4hep.root
        key: sim_${{ matrix.particle }}_EcalLumiSpec_${{ matrix.detector_config }}.edm4hep.root-${{ steps.detector_info.outputs.hash }}
    - name: Produce simulation files
      uses: eic/run-cvmfs-osg-eic-shell@main
      if: steps.retrieve_simulation_files.outputs.cache-hit != 'true'
      with:
        platform-release: "jug_xl:nightly"
        setup: /opt/detector/setup.sh
        run: |
          python src/tests/LUMISPECCAL_test/TwoElectronsTopCAL.py genParticles.hepmc
          ddsim --compactFile ${DETECTOR_PATH}/${DETECTOR}_${{ matrix.detector_config }}.xml --inputFiles genParticles.hepmc --random.seed 1 --outputFile sim_${{ matrix.particle }}_EcalLumiSpec_${{ matrix.detector_config }}.edm4hep.root -N 100 -v WARNING
    - uses: actions/upload-artifact@v3
      with:
        name: sim_${{ matrix.particle }}_EcalLumiSpec_${{ matrix.detector_config }}.edm4hep.root
        path: sim_${{ matrix.particle }}_EcalLumiSpec_${{ matrix.detector_config }}.edm4hep.root
        if-no-files-found: error

  ddsim-dis:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        beam: [5x41, 10x100, 18x275]
        minq2: [1, 1000]
        detector_config: [brycecanyon, craterlake]
        exclude:
        - beam: 5x41
          minq2: 1000
    steps:
    - uses: cvmfs-contrib/github-action-cvmfs@v3
    - name: Get detector info
      id: detector_info
      run: |
        grep epic/nightly /cvmfs/singularity.opensciencegrid.org/eicweb/jug_xl\:nightly/etc/jug_info | sed 's/.*: .*-\(.*\)/hash=\1/g' >> $GITHUB_OUTPUT
    - name: Retrieve simulation files
      id: retrieve_simulation_files
      uses: actions/cache@v3
      with:
        path: sim_dis_${{matrix.beam}}_minQ2=${{matrix.minq2}}_${{ matrix.detector_config }}.edm4hep.root
        key: sim_dis_${{matrix.beam}}_minQ2=${{matrix.minq2}}_${{ matrix.detector_config }}.edm4hep.root-${{ steps.detector_info.outputs.hash }}
    - name: Produce simulation files
      uses: eic/run-cvmfs-osg-eic-shell@main
      if: steps.retrieve_simulation_files.outputs.cache-hit != 'true'
      with:
        platform-release: "jug_xl:nightly"
        setup: /opt/detector/setup.sh
        run: |
          url=root://dtn-eic.jlab.org//work/eic2/EPIC/EVGEN/DIS/NC/${{matrix.beam}}/minQ2=${{matrix.minq2}}/pythia8NCDIS_${{matrix.beam}}_minQ2=${{matrix.minq2}}_beamEffects_xAngle=-0.025_hiDiv_1.hepmc3.tree.root
          ddsim --compactFile ${DETECTOR_PATH}/${DETECTOR}_${{ matrix.detector_config }}.xml -N 100 --inputFiles ${url} --random.seed 1 --outputFile sim_dis_${{matrix.beam}}_minQ2=${{matrix.minq2}}_${{ matrix.detector_config }}.edm4hep.root -v WARNING
    - uses: actions/upload-artifact@v3
      with:
        name: sim_dis_${{matrix.beam}}_minQ2=${{matrix.minq2}}_${{ matrix.detector_config }}.edm4hep.root
        path: sim_dis_${{matrix.beam}}_minQ2=${{matrix.minq2}}_${{ matrix.detector_config }}.edm4hep.root
        if-no-files-found: error

  eicrecon-gun:
    runs-on: ubuntu-latest
    needs:
    - build
    - ddsim-gun
    strategy:
      matrix:
        CC: [gcc, clang]
        particle: [pi, e]
        detector_config: [brycecanyon, craterlake]
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: install-${{ matrix.CC }}-eic-shell-Release
    - uses: actions/download-artifact@v3
      with:
        name: sim_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4hep.root
    - uses: cvmfs-contrib/github-action-cvmfs@v3
    - name: Run EICrecon
      uses: eic/run-cvmfs-osg-eic-shell@main
      with:
        platform-release: "jug_xl:nightly"
        setup: /opt/detector/setup.sh
        run: |
          export DETECTOR_CONFIG=${DETECTOR}_${{ matrix.detector_config }}
          export JANA_PLUGIN_PATH=$PWD/lib/EICrecon/plugins:/usr/local/plugins
          chmod a+x bin/*
          LD_WARN=1 $PWD/bin/eicrecon -Ppodio:output_file=rec_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4eic.root sim_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4hep.root -Pplugins=dump_flags,janadot -Pdump_flags:json=${{ matrix.particle }}_${{ matrix.detector_config }}_flags.json -Pjana:warmup_timeout=0 -Pjana:timeout=0
          dot -Tsvg jana.dot > jana.svg
          mv jana.dot rec_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.dot
          mv jana.svg rec_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.svg
    - uses: actions/upload-artifact@v3
      with:
        name: rec_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4eic.root
        path: rec_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4eic.root
        if-no-files-found: error
    - uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.particle }}_${{ matrix.detector_config }}_flags.json
        path: ${{ matrix.particle }}_${{ matrix.detector_config }}_flags.json
        if-no-files-found: error
    - uses: actions/upload-artifact@v3
      with:
        name: jana.dot
        path: |
          *.dot
          *.svg
        if-no-files-found: error
    - name: Download previous artifact
      id: download_previous_artifact
      uses: dawidd6/action-download-artifact@v2
      with:
        branch: ${{ github.event.pull_request.base.ref || github.ref_name }}
        path: ref/
        name: rec_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4eic.root
        if_no_artifact_found: warn
    - name: Checkout epic-capybara
      uses: actions/checkout@v3
      if: steps.download_previous_artifact.outputs.found_artifact == 'true'
      with:
        repository: 'eic/epic-capybara'
        path: epic-capybara
    - name: Build and install epic-capybara
      if: steps.download_previous_artifact.outputs.found_artifact == 'true'
      run: |
        pip install hatch
        cd epic-capybara
        hatch build
        pip install dist/*.whl
    - name: Compare to previous artifacts
      uses: eic/run-cvmfs-osg-eic-shell@main
      if: steps.download_previous_artifact.outputs.found_artifact == 'true'
      with:
        platform-release: "jug_xl:nightly"
        setup: /opt/detector/setup.sh
        run: |
          echo "::group::pip install"
          python3 -m pip install -r ${{ github.workspace }}/.github/requirements.txt
          echo "::endgroup::"
          python3 ${{ github.workspace }}/epic-capybara/bara.py ref/rec_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4eic.root rec_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4eic.root
