name: Build against eic-shell

on:
  push:
    branches:
      - main
      - 'v[0-9]+.[0-9]+' # maintenance branches
    tags:
      - '*'
  pull_request:
  merge_group:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  ASAN_OPTIONS: suppressions=${{ github.workspace }}/.github/asan.supp:malloc_context_size=20:detect_leaks=1:verify_asan_link_order=0:detect_stack_use_after_return=1:detect_odr_violation=1:new_delete_type_mismatch=0:intercept_tls_get_addr=0
  LSAN_OPTIONS: suppressions=${{ github.workspace }}/.github/lsan.supp
  UBSAN_OPTIONS: suppressions=${{ github.workspace }}/.github/ubsan.supp:print_stacktrace=1

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - CC: gcc
            CXX: g++
            CMAKE_BUILD_TYPE: Release
          - CC: gcc
            CXX: g++
            CMAKE_BUILD_TYPE: Debug
          - CC: clang
            CXX: clang++
            CMAKE_BUILD_TYPE: Release
          - CC: clang
            CXX: clang++
            CMAKE_BUILD_TYPE: Debug
            CXXFLAGS: -fprofile-instr-generate -fcoverage-mapping
    steps:
    - uses: actions/checkout@v3
    - name: Prepare ccache timestamp
      id: ccache_cache_timestamp
      run: |
        echo "timestamp=$(date --iso-8601=minutes)" >> $GITHUB_OUTPUT
    - name: Retrieve ccache cache files
      uses: actions/cache@v3
      with:
        path: .ccache
        key: ccache-${{ matrix.CC }}-${{ matrix.CMAKE_BUILD_TYPE }}-${{ github.event.pull_request.head.ref || github.ref_name }}-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
        restore-keys: |
             ccache-${{ matrix.CC }}-${{ matrix.CMAKE_BUILD_TYPE }}-${{ github.ref_name }}-
             ccache-${{ matrix.CC }}-${{ matrix.CMAKE_BUILD_TYPE }}-${{ github.event.pull_request.head.ref }}-
             ccache-${{ matrix.CC }}-${{ matrix.CMAKE_BUILD_TYPE }}-${{ github.event.pull_request.base.ref }}-
             ccache-${{ matrix.CC }}-${{ matrix.CMAKE_BUILD_TYPE }}-
             ccache-${{ matrix.CC }}-
             ccache-
    - name: Configure ccache
      run: |
        mkdir -p ~/.ccache/
        echo "cache_dir=${{ github.workspace }}/.ccache" > ~/.ccache/ccache.conf
        echo "max_size=1500MB" >> ~/.ccache/ccache.conf
        echo "compression=true" >> ~/.ccache/ccache.conf
    - uses: cvmfs-contrib/github-action-cvmfs@v3
    - name: Build and install
      uses: eic/run-cvmfs-osg-eic-shell@main
      with:
        platform-release: "jug_xl:nightly"
        run: |
          # install this repo
          CC="${{ matrix.CC }}" CXX="${{ matrix.CXX }}" CXXFLAGS="${{ matrix.CXXFLAGS }}" cmake -B build -S . -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_BUILD_TYPE=${{ matrix.CMAKE_BUILD_TYPE }} -DUSE_ASAN=ON -DUSE_TSAN=OFF -DUSE_UBSAN=ON
          cmake --build build -- -j 2 install
          ccache --show-stats --verbose
    - name: Check dynamic library loader paths
      uses: eic/run-cvmfs-osg-eic-shell@main
      with:
        platform-release: "jug_xl:nightly"
        setup: /opt/detector/setup.sh
        run: |
          export LD_LIBRARY_PATH=$PWD/lib:$LD_LIBRARY_PATH
          for lib in lib/*.so lib/EICrecon/plugins/*.so ; do
            readelf -d $lib
            ldd -r $lib
          done
    - name: Run testsuite
      uses: eic/run-cvmfs-osg-eic-shell@main
      with:
        platform-release: "jug_xl:nightly"
        run: |
          export LD_LIBRARY_PATH=$PWD/lib:$LD_LIBRARY_PATH
          ctest --test-dir build -V
    - uses: actions/upload-artifact@v3
      with:
        name: install-${{ matrix.CC }}-eic-shell-${{ matrix.CMAKE_BUILD_TYPE }}
        path: |
          .
          !src/
          !build/
          !apt_cache/
          !.git/
          !.ccache/
        if-no-files-found: error
    - uses: actions/upload-artifact@v3
      with:
        name: build-${{ matrix.CC }}-eic-shell-${{ matrix.CMAKE_BUILD_TYPE }}
        path: |
          build/
        if-no-files-found: error

  clang-tidy-iwyu:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - run: echo "FETCH_DEPTH=$(( ${{ github.event.pull_request.commits }} + 1 ))" >> "${GITHUB_ENV}"
    - uses: actions/checkout@v3
      with:
        fetch-depth: ${{ env.FETCH_DEPTH }}
    - uses: cvmfs-contrib/github-action-cvmfs@v3
    - name: Download build artifact
      uses: actions/download-artifact@v3
      with:
        name: build-clang-eic-shell-Debug
        path: build/
    - name: Run clang-tidy on changed files
      uses: eic/run-cvmfs-osg-eic-shell@main
      if: ${{ github.event_name == 'pull_request' }}
      with:
        platform-release: "jug_xl:nightly"
        run: |
          git diff ${{github.event.pull_request.base.sha}} ${{ github.event.pull_request.base.sha }} | clang-tidy-diff -p 1 -path build -quiet -export-fixes clang_tidy_fixes.yml -extra-arg='-std=c++17' -checks='-*,bugprone-*,-bugprone-narrowing-conversions' -clang-tidy-binary run-clang-tidy
    - name: Run clang-tidy on all files
      uses: eic/run-cvmfs-osg-eic-shell@main
      if: ${{ github.event_name == 'push' }}
      with:
        platform-release: "jug_xl:nightly"
        run: |
          run-clang-tidy -p build -export-fixes clang_tidy_fixes.yml -extra-arg='-std=c++17'
    - name: Upload clang-tidy fixes as artifact
      uses: actions/upload-artifact@v3
      with:
        name: clang-tidy-fixes.yml
        path: clang_tidy_fixes.yml
        if-no-files-found: ignore
    - name: Suggest clang-tidy fixes as PR comments
      uses: platisd/clang-tidy-pr-comments@1.4.0
      if: ${{ github.event_name == 'pull_request' }}
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        clang_tidy_fixes: clang_tidy_fixes.yml
        request_changes: true
        suggestions_per_comment: 10
    - name: Run include-what-you-use (iwyu) on changed files
      uses: eic/run-cvmfs-osg-eic-shell@main
      if: ${{ github.event_name == 'pull_request' }}
      with:
        platform-release: "jug_xl:nightly"
        run: |
          # reduce headers until diff is stable
          while [[ ${sha:-} != $(git diff | sha256sum) ]] ; do
            sha=$(git diff | sha256sum)
            echo $sha
            iwyu_tool -p build $(git diff --name-only ${{github.event.pull_request.head.sha}} ${{ github.event.pull_request.base.sha }}) -- -Xiwyu --verbose=3 -Xiwyu --no_fwd_decls -Xiwyu --cxx17ns -Xiwyu --mapping_file=${{github.workspace}}/.github/iwyu.imp | tee iwyu_fixes.log
            fix_include --blank_lines --nosafe_headers --reorder --separate_project_includes="<tld>" --keep_iwyu_namespace_format < iwyu_fixes.log
            git diff | tee iwyu_fixes.patch
          done
    - name: Run include-what-you-use (iwyu) on all files
      uses: eic/run-cvmfs-osg-eic-shell@main
      if: ${{ github.event_name == 'push' }}
      with:
        platform-release: "jug_xl:nightly"
        run: |
          # don't aim for stability for all files
          iwyu_tool -p build -- -Xiwyu --verbose=3 -Xiwyu --no_fwd_decls -Xiwyu --cxx17ns -Xiwyu --mapping_file=${{github.workspace}}/.github/iwyu.imp | tee iwyu_fixes.log
          fix_include --blank_lines --nosafe_headers --reorder --separate_project_includes="<tld>" --keep_iwyu_namespace_format < iwyu_fixes.log
          git diff | tee iwyu_fixes.patch
    - name: Upload iwyu patch as artifact
      uses: actions/upload-artifact@v3
      with:
        name: iwyu_fixes.patch
        path: iwyu_fixes.patch
        if-no-files-found: ignore # no file is good
    - name: Fail when iwyu provided a patch for this pull request
      if: ${{ github.event_name == 'pull_request' }}
      run: git diff --exit-code

  llvm-cov:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      statuses: write
    steps:
    - uses: actions/checkout@v3
    - uses: actions/download-artifact@v3
      with:
        name: build-clang-eic-shell-Debug
        path: build/
    - run: sudo apt-get update
    - run: sudo apt-get install -y llvm-15 jq
    - name: llvm-cov
      run: |
        cd build
        COV_OPTIONS=('--ignore-filename-regex=usr/local/include/eigen3.+')
        llvm-profdata-15 merge -sparse src/tests/algorithms_test/algorithms_test.profraw \
          -o src/tests/algorithms_test/algorithms_test.profdata
        LIB_PATHS=()
        for LIB_NAME in algorithms_calorimetry algorithms_digi algorithms_pid algorithms_reco algorithms_tracking; do
          LIB_PATH="$(find src/ -type f -name "*$LIB_NAME.so")"
          LIB_PATHS+=("$LIB_PATH")
          llvm-cov-15 report $LIB_PATH \
            -instr-profile=src/tests/algorithms_test/algorithms_test.profdata \
            "${COV_OPTIONS[@]}"
          COV_PERCENT=$(llvm-cov-15 export $LIB_PATH \
            -instr-profile=src/tests/algorithms_test/algorithms_test.profdata \
            "${COV_OPTIONS[@]}" | jq '.data | map(.totals.regions.percent) | .[]' | xargs printf "%.1f\n")
          if [ "${{ github.event.pull_request.head.repo.full_name }}" = "${{ github.repository }}" ]; then
            curl --request POST \
              --url https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha || github.sha }} \
              --header "Accept: application/vnd.github+json" \
              --header "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              --header "X-GitHub-Api-Version: 2022-11-28" \
              --data '{
                "state": "success",
                "context": "Code coverage ('$LIB_NAME') - '$COV_PERCENT'%"
                }' \
              --fail-with-body
          else
            echo 'PR submitted from a fork. Skipping posting the "Code coverage ('$LIB_NAME') - '$COV_PERCENT'%" status.'
          fi
        done
        llvm-cov-15 show "${LIB_PATHS[@]/#/--object=}" \
          -instr-profile=src/tests/algorithms_test/algorithms_test.profdata \
          -output-dir=codecov_report -format=html \
          "${COV_OPTIONS[@]}"
    - uses: actions/upload-artifact@v3
      with:
        name: codecov_report
        path: build/codecov_report/

  npsim-gun:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        particle: [pi, e]
        detector_config: [brycecanyon, craterlake]
    steps:
    - uses: cvmfs-contrib/github-action-cvmfs@v3
    - name: Get detector info
      id: detector_info
      run: |
        grep epic/nightly /cvmfs/singularity.opensciencegrid.org/eicweb/jug_xl\:nightly/etc/jug_info | sed 's/.*: .*-\(.*\)/hash=\1/g' >> $GITHUB_OUTPUT
    - name: Retrieve simulation files
      id: retrieve_simulation_files
      uses: actions/cache@v3
      with:
        path: sim_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4hep.root
        key: sim_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4hep.root-${{ steps.detector_info.outputs.hash }}
    - name: Produce simulation files
      uses: eic/run-cvmfs-osg-eic-shell@main
      if: steps.retrieve_simulation_files.outputs.cache-hit != 'true'
      with:
        platform-release: "jug_xl:nightly"
        setup: /opt/detector/setup.sh
        run: |
          npsim --compactFile ${DETECTOR_PATH}/${DETECTOR}_${{ matrix.detector_config }}.xml -G --random.seed 1 --gun.particle "${{ matrix.particle }}-" --gun.momentumMin "1*GeV" --gun.momentumMax "20*GeV" --gun.distribution "uniform" -N 100 --outputFile sim_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4hep.root -v WARNING
    - uses: actions/upload-artifact@v3
      with:
        name: sim_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4hep.root
        path: sim_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4hep.root
        if-no-files-found: error

  npsim-gun-EcalLumiSpec:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        particle: [e]
        detector_config: [ip6_extended]
    steps:
    - uses: actions/checkout@v3
    - uses: cvmfs-contrib/github-action-cvmfs@v3
    - name: Get detector info
      id: detector_info
      run: |
        grep epic/nightly /cvmfs/singularity.opensciencegrid.org/eicweb/jug_xl\:nightly/etc/jug_info | sed 's/.*: .*-\(.*\)/hash=\1/g' >> $GITHUB_OUTPUT
    - name: Retrieve simulation files
      id: retrieve_simulation_files
      uses: actions/cache@v3
      with:
        path: sim_${{ matrix.particle }}_EcalLumiSpec_${{ matrix.detector_config }}.edm4hep.root
        key: sim_${{ matrix.particle }}_EcalLumiSpec_${{ matrix.detector_config }}.edm4hep.root-${{ steps.detector_info.outputs.hash }}
    - name: Produce simulation files
      uses: eic/run-cvmfs-osg-eic-shell@main
      if: steps.retrieve_simulation_files.outputs.cache-hit != 'true'
      with:
        platform-release: "jug_xl:nightly"
        setup: /opt/detector/setup.sh
        run: |
          python src/tests/LUMISPECCAL_test/TwoElectronsTopCAL.py genParticles.hepmc
          npsim --compactFile ${DETECTOR_PATH}/${DETECTOR}_${{ matrix.detector_config }}.xml --inputFiles genParticles.hepmc --random.seed 1 --outputFile sim_${{ matrix.particle }}_EcalLumiSpec_${{ matrix.detector_config }}.edm4hep.root -N 100 -v WARNING
    - uses: actions/upload-artifact@v3
      with:
        name: sim_${{ matrix.particle }}_EcalLumiSpec_${{ matrix.detector_config }}.edm4hep.root
        path: sim_${{ matrix.particle }}_EcalLumiSpec_${{ matrix.detector_config }}.edm4hep.root
        if-no-files-found: error

  npsim-dis:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        beam: [5x41, 10x100, 18x275]
        minq2: [1, 1000]
        detector_config: [brycecanyon, craterlake]
        exclude:
        - beam: 5x41
          minq2: 1000
    steps:
    - uses: cvmfs-contrib/github-action-cvmfs@v3
    - name: Get detector info
      id: detector_info
      run: |
        grep epic/nightly /cvmfs/singularity.opensciencegrid.org/eicweb/jug_xl\:nightly/etc/jug_info | sed 's/.*: .*-\(.*\)/hash=\1/g' >> $GITHUB_OUTPUT
    - name: Retrieve simulation files
      id: retrieve_simulation_files
      uses: actions/cache@v3
      with:
        path: sim_dis_${{matrix.beam}}_minQ2=${{matrix.minq2}}_${{ matrix.detector_config }}.edm4hep.root
        key: sim_dis_${{matrix.beam}}_minQ2=${{matrix.minq2}}_${{ matrix.detector_config }}.edm4hep.root-${{ steps.detector_info.outputs.hash }}
    - name: Produce simulation files
      uses: eic/run-cvmfs-osg-eic-shell@main
      if: steps.retrieve_simulation_files.outputs.cache-hit != 'true'
      with:
        platform-release: "jug_xl:nightly"
        setup: /opt/detector/setup.sh
        run: |
          url=root://dtn-eic.jlab.org//work/eic2/EPIC/EVGEN/DIS/NC/${{matrix.beam}}/minQ2=${{matrix.minq2}}/pythia8NCDIS_${{matrix.beam}}_minQ2=${{matrix.minq2}}_beamEffects_xAngle=-0.025_hiDiv_1.hepmc3.tree.root
          npsim --compactFile ${DETECTOR_PATH}/${DETECTOR}_${{ matrix.detector_config }}.xml -N 100 --inputFiles ${url} --random.seed 1 --outputFile sim_dis_${{matrix.beam}}_minQ2=${{matrix.minq2}}_${{ matrix.detector_config }}.edm4hep.root -v WARNING
    - uses: actions/upload-artifact@v3
      with:
        name: sim_dis_${{matrix.beam}}_minQ2=${{matrix.minq2}}_${{ matrix.detector_config }}.edm4hep.root
        path: sim_dis_${{matrix.beam}}_minQ2=${{matrix.minq2}}_${{ matrix.detector_config }}.edm4hep.root
        if-no-files-found: error

  eicrecon-two-stage-running:
    runs-on: ubuntu-latest
    needs:
    - build
    - npsim-gun
    strategy:
      matrix:
        CC: [gcc]
        particle: [e]
        detector_config: [brycecanyon]
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: install-${{ matrix.CC }}-eic-shell-Release
    - name: Download simulation input
      uses: actions/download-artifact@v3
      with:
        name: sim_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4hep.root
    - name: Setup cvmfs
      uses: cvmfs-contrib/github-action-cvmfs@v3
    - name: Run EICrecon (digitization)
      uses: eic/run-cvmfs-osg-eic-shell@main
      with:
        platform-release: "jug_xl:nightly"
        setup: /opt/detector/setup.sh
        run: |
          export DETECTOR_CONFIG=${DETECTOR}_${{ matrix.detector_config }}
          export LD_LIBRARY_PATH=$PWD/lib:$LD_LIBRARY_PATH
          export JANA_PLUGIN_PATH=$PWD/lib/EICrecon/plugins${JANA_PLUGIN_PATH:+:${JANA_PLUGIN_PATH}}
          chmod a+x bin/*
          $PWD/bin/eicrecon -Ppodio:output_include_collections=EventHeader,MCParticles,EcalBarrelScFiRawHits,EcalBarrelImagingRawHits -Ppodio:output_file=raw_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4eic.root sim_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4hep.root -Pplugins=dump_flags,janadot -Pdump_flags:json=${{ matrix.particle }}_${{ matrix.detector_config }}_flags.json -Pjana:warmup_timeout=0 -Pjana:timeout=0
    - name: Upload digitization output
      uses: actions/upload-artifact@v3
      with:
        name: raw_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4eic.root
        path: raw_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4eic.root
        if-no-files-found: error
    - name: Run EICrecon (reconstruction)
      uses: eic/run-cvmfs-osg-eic-shell@main
      with:
        platform-release: "jug_xl:nightly"
        setup: /opt/detector/setup.sh
        run: |
          export DETECTOR_CONFIG=${DETECTOR}_${{ matrix.detector_config }}
          export LD_LIBRARY_PATH=$PWD/lib:$LD_LIBRARY_PATH
          export JANA_PLUGIN_PATH=$PWD/lib/EICrecon/plugins${JANA_PLUGIN_PATH:+:${JANA_PLUGIN_PATH}}
          chmod a+x bin/*
          $PWD/bin/eicrecon -Ppodio:output_include_collections=EcalBarrelClusters,EcalBarrelClusterAssociations -Ppodio:output_file=rec_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4eic.root raw_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4eic.root -Pplugins=dump_flags,janadot -Pdump_flags:json=${{ matrix.particle }}_${{ matrix.detector_config }}_flags.json -Pjana:warmup_timeout=0 -Pjana:timeout=0
    - name: Upload reconstruction output
      uses: actions/upload-artifact@v3
      with:
        name: rec_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4eic.root
        path: rec_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4eic.root
        if-no-files-found: error

  eicrecon-eicmkplugin:
    runs-on: ubuntu-latest
    needs:
    - build
    - npsim-gun
    strategy:
      matrix:
        CC: [gcc]
        particle: [e]
        detector_config: [brycecanyon]
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: install-${{ matrix.CC }}-eic-shell-Release
    - uses: actions/download-artifact@v3
      with:
        name: sim_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4hep.root
    - uses: cvmfs-contrib/github-action-cvmfs@v3
    - name: Run EICrecon
      uses: eic/run-cvmfs-osg-eic-shell@main
      with:
        platform-release: "jug_xl:nightly"
        setup: /opt/detector/setup.sh
        run: |
          export DETECTOR_CONFIG=${DETECTOR}_${{ matrix.detector_config }}
          export LD_LIBRARY_PATH=$PWD/lib:$LD_LIBRARY_PATH
          export JANA_PLUGIN_PATH=$PWD/lib/EICrecon/plugins${JANA_PLUGIN_PATH:+:${JANA_PLUGIN_PATH}}
          chmod a+x bin/*
          $PWD/bin/eicmkplugin.py MyCustomPlugin
          cmake -S MyCustomPlugin -B MyCustomPlugin/build -DUSER_PLUGIN_OUTPUT_DIRECTORY=$PWD/lib/EICrecon/plugins
          cmake --build MyCustomPlugin/build --target install
          $PWD/bin/eicrecon -Pplugins=MyCustomPlugin -Ppodio:output_file=rec_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4eic.root sim_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4hep.root -Pplugins=dump_flags,janadot -Pdump_flags:json=${{ matrix.particle }}_${{ matrix.detector_config }}_flags.json -Pjana:warmup_timeout=0 -Pjana:timeout=0

  eicrecon-benchmarks-plugins:
    runs-on: ubuntu-latest
    needs:
    - build
    - npsim-gun
    strategy:
      matrix:
        CC: [gcc]
        particle: [e]
        detector_config: [brycecanyon]
        benchmark_plugins:
        - EcalBarrelScFiCheck
        - femc_studies
        - lfhcal_studies
        - tof_efficiency
        - TRACKINGcheck
        - tracking_efficiency
        - tracking_occupancy
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: install-${{ matrix.CC }}-eic-shell-Release
    - uses: actions/download-artifact@v3
      with:
        name: sim_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4hep.root
    - uses: cvmfs-contrib/github-action-cvmfs@v3
    - name: Run EICrecon
      uses: eic/run-cvmfs-osg-eic-shell@main
      with:
        platform-release: "jug_xl:nightly"
        setup: /opt/detector/setup.sh
        run: |
          export DETECTOR_CONFIG=${DETECTOR}_${{ matrix.detector_config }}
          export LD_LIBRARY_PATH=$PWD/lib:$LD_LIBRARY_PATH
          export JANA_PLUGIN_PATH=$PWD/lib/EICrecon/plugins${JANA_PLUGIN_PATH:+:${JANA_PLUGIN_PATH}}
          chmod a+x bin/*
          $PWD/bin/eicrecon -Pplugins=${{ matrix.benchmark_plugins }} -Phistsfile=rec_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}_${{ matrix.benchmark_plugins }}.hists.root -Ppodio:output_file=rec_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4eic.root sim_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4hep.root -Pplugins=dump_flags,janadot -Pdump_flags:json=${{ matrix.particle }}_${{ matrix.detector_config }}_flags.json -Pjana:warmup_timeout=0 -Pjana:timeout=0
    - uses: actions/upload-artifact@v3
      with:
        name: rec_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}_${{ matrix.benchmark_plugins }}.hists.root
        path: rec_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}_${{ matrix.benchmark_plugins }}.hists.root
        if-no-files-found: error

  eicrecon-gun:
    runs-on: ubuntu-latest
    needs:
    - build
    - npsim-gun
    strategy:
      matrix:
        CC: [gcc, clang]
        particle: [pi, e]
        detector_config: [brycecanyon, craterlake]
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: install-${{ matrix.CC }}-eic-shell-Release
    - uses: actions/download-artifact@v3
      with:
        name: sim_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4hep.root
    - uses: cvmfs-contrib/github-action-cvmfs@v3
    - name: Check dynamic library loader paths
      uses: eic/run-cvmfs-osg-eic-shell@main
      with:
        platform-release: "jug_xl:nightly"
        setup: /opt/detector/setup.sh
        run: |
          export LD_LIBRARY_PATH=$PWD/lib:$LD_LIBRARY_PATH
          ldd -r lib/*.so lib/EICrecon/plugins/*.so
    - name: Run EICrecon
      uses: eic/run-cvmfs-osg-eic-shell@main
      with:
        platform-release: "jug_xl:nightly"
        setup: /opt/detector/setup.sh
        run: |
          export DETECTOR_CONFIG=${DETECTOR}_${{ matrix.detector_config }}
          export LD_LIBRARY_PATH=$PWD/lib:$LD_LIBRARY_PATH
          export JANA_PLUGIN_PATH=$PWD/lib/EICrecon/plugins:/usr/local/plugins
          chmod a+x bin/*
          $PWD/bin/eicrecon -Ppodio:output_file=rec_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4eic.root sim_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4hep.root -Pplugins=dump_flags,janadot -Pdump_flags:json=${{ matrix.particle }}_${{ matrix.detector_config }}_flags.json -Pjana:warmup_timeout=0 -Pjana:timeout=0
          dot -Tsvg jana.dot > jana.svg
          mv jana.dot rec_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.dot
          mv jana.svg rec_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.svg
    - uses: actions/upload-artifact@v3
      with:
        name: rec_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4eic.root
        path: rec_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4eic.root
        if-no-files-found: error
    - uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.particle }}_${{ matrix.detector_config }}_flags.json
        path: ${{ matrix.particle }}_${{ matrix.detector_config }}_flags.json
        if-no-files-found: error
    - uses: actions/upload-artifact@v3
      with:
        name: jana.dot
        path: |
          *.dot
          *.svg
        if-no-files-found: error
    - name: Download previous artifact
      id: download_previous_artifact
      uses: dawidd6/action-download-artifact@v2
      with:
        branch: ${{ github.event.pull_request.base.ref || github.ref_name }}
        path: ref/
        name: rec_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4eic.root
        if_no_artifact_found: warn
    - name: Checkout epic-capybara
      uses: actions/checkout@v3
      if: steps.download_previous_artifact.outputs.found_artifact == 'true'
      with:
        repository: 'eic/epic-capybara'
        path: epic-capybara
    - name: Build and install epic-capybara
      if: steps.download_previous_artifact.outputs.found_artifact == 'true'
      run: |
        pip install hatch
        cd epic-capybara
        hatch build
        pip install dist/*.whl
    - name: Compare to previous artifacts
      uses: eic/run-cvmfs-osg-eic-shell@main
      if: steps.download_previous_artifact.outputs.found_artifact == 'true'
      with:
        platform-release: "jug_xl:nightly"
        setup: /opt/detector/setup.sh
        run: |
          echo "::group::pip install"
          python3 -m pip install -r ${{ github.workspace }}/.github/requirements.txt
          echo "::endgroup::"
          python3 ${{ github.workspace }}/epic-capybara/bara.py ref/rec_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4eic.root rec_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4eic.root


  eicrecon-gun-EcalLumiSpec:
    runs-on: ubuntu-latest
    needs:
    - build
    - npsim-gun-EcalLumiSpec
    strategy:
      matrix:
        CC: [clang]
        particle: [e]
        detector_config: [ip6_extended]
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: install-${{ matrix.CC }}-eic-shell-Release
    - uses: actions/download-artifact@v3
      with:
        name: sim_${{ matrix.particle }}_EcalLumiSpec_${{ matrix.detector_config }}.edm4hep.root
    - uses: cvmfs-contrib/github-action-cvmfs@v3
    - name: Run EICrecon
      uses: eic/run-cvmfs-osg-eic-shell@main
      with:
        platform-release: "jug_xl:nightly"
        setup: /opt/detector/setup.sh
        run: |
          export DETECTOR_CONFIG=${DETECTOR}_${{ matrix.detector_config }}
          export LD_LIBRARY_PATH=$PWD/lib:$LD_LIBRARY_PATH
          export JANA_PLUGIN_PATH=$PWD/lib/EICrecon/plugins:/usr/local/plugins
          chmod a+x bin/*
          $PWD/bin/eicrecon -Ppodio:output_file=rec_${{ matrix.particle }}_EcalLumiSpec_${{ matrix.detector_config }}.edm4eic.root sim_${{ matrix.particle }}_EcalLumiSpec_${{ matrix.detector_config }}.edm4hep.root -Ppodio:output_include_collections=EcalLumiSpecRawHits,EcalLumiSpecRecHits,EcalLumiSpecClusters,EcalLumiSpecClusterAssociations -PLUMISPECCAL:EcalLumiSpecIslandProtoClusters:splitCluster=1 -Pplugins=dump_flags,janadot -Pdump_flags:json=${{ matrix.particle }}_${{ matrix.detector_config }}_flags.json -Pjana:warmup_timeout=0 -Pjana:timeout=0
    - uses: actions/upload-artifact@v3
      with:
        name: rec_${{ matrix.particle }}_EcalLumiSpec_${{ matrix.detector_config }}.edm4eic.root
        path: rec_${{ matrix.particle }}_EcalLumiSpec_${{ matrix.detector_config }}.edm4eic.root
        if-no-files-found: error
    - uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.particle }}_${{ matrix.detector_config }}_flags.json
        path: ${{ matrix.particle }}_${{ matrix.detector_config }}_flags.json
        if-no-files-found: error
    - uses: actions/upload-artifact@v3
      with:
        name: rec_${{ matrix.particle }}_EcalLumiSpec_${{ matrix.detector_config }}.dot
        path: jana.dot
        if-no-files-found: error

  eicrecon-dis:
    runs-on: ubuntu-latest
    needs:
    - build
    - npsim-dis
    strategy:
      matrix:
        CC: [gcc, clang]
        beam: [5x41, 10x100, 18x275]
        minq2: [1, 1000]
        detector_config: [brycecanyon, craterlake]
        exclude:
        - beam: 5x41
          minq2: 1000
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: install-${{ matrix.CC }}-eic-shell-Release
    - uses: actions/download-artifact@v3
      with:
        name: sim_dis_${{ matrix.beam }}_minQ2=${{ matrix.minq2 }}_${{ matrix.detector_config }}.edm4hep.root
    - uses: cvmfs-contrib/github-action-cvmfs@v3
    - name: Run EICrecon
      uses: eic/run-cvmfs-osg-eic-shell@main
      with:
        platform-release: "jug_xl:nightly"
        setup: /opt/detector/setup.sh
        run: |
          export DETECTOR_CONFIG=${DETECTOR}_${{ matrix.detector_config }}
          export LD_LIBRARY_PATH=$PWD/lib:$LD_LIBRARY_PATH
          export JANA_PLUGIN_PATH=$PWD/lib/EICrecon/plugins:/usr/local/plugins
          chmod a+x bin/*
          $PWD/bin/eicrecon -Ppodio:output_file=rec_dis_${{matrix.beam}}_minQ2=${{matrix.minq2}}_${{ matrix.detector_config }}.edm4eic.root sim_dis_${{matrix.beam}}_minQ2=${{matrix.minq2}}_${{ matrix.detector_config }}.edm4hep.root -Pplugins=janadot -Pjana:warmup_timeout=0 -Pjana:timeout=0
          dot -Tsvg jana.dot > jana.svg
          mv jana.dot rec_dis_${{matrix.beam}}_minQ2=${{matrix.minq2}}_${{ matrix.detector_config }}.dot
          mv jana.svg rec_dis_${{matrix.beam}}_minQ2=${{matrix.minq2}}_${{ matrix.detector_config }}.svg
    - uses: actions/upload-artifact@v3
      with:
        name: rec_dis_${{matrix.beam}}_minQ2=${{matrix.minq2}}_${{ matrix.detector_config }}.edm4eic.root
        path: rec_dis_${{matrix.beam}}_minQ2=${{matrix.minq2}}_${{ matrix.detector_config }}.edm4eic.root
        if-no-files-found: error
    - uses: actions/upload-artifact@v3
      with:
        name: jana.dot
        path: |
          *.dot
          *.svg
        if-no-files-found: error
    - name: Download previous artifact
      id: download_previous_artifact
      uses: dawidd6/action-download-artifact@v2
      with:
        branch: ${{ github.event.pull_request.base.ref || github.ref_name }}
        path: ref/
        name: rec_dis_${{matrix.beam}}_minQ2=${{matrix.minq2}}_${{ matrix.detector_config }}.edm4eic.root
        if_no_artifact_found: warn
    - name: Checkout epic-capybara
      uses: actions/checkout@v3
      if: steps.download_previous_artifact.outputs.found_artifact == 'true'
      with:
        repository: 'eic/epic-capybara'
        path: epic-capybara
    - name: Build and install epic-capybara
      if: steps.download_previous_artifact.outputs.found_artifact == 'true'
      run: |
        pip install hatch
        cd epic-capybara
        hatch build
        pip install dist/*.whl
    - name: Compare to previous artifacts
      uses: eic/run-cvmfs-osg-eic-shell@main
      if: steps.download_previous_artifact.outputs.found_artifact == 'true'
      with:
        platform-release: "jug_xl:nightly"
        setup: /opt/detector/setup.sh
        run: |
          echo "::group::pip install"
          python3 -m pip install -r ${{ github.workspace }}/.github/requirements.txt
          echo "::endgroup::"
          echo "::group::diff ref -> new"
          python3 ${{ github.workspace }}/epic-capybara/bara.py ref/rec_dis_${{matrix.beam}}_minQ2=${{matrix.minq2}}_${{ matrix.detector_config }}.edm4eic.root rec_dis_${{matrix.beam}}_minQ2=${{matrix.minq2}}_${{ matrix.detector_config }}.edm4eic.root
          echo "::endgroup::"

  build-docs:
    runs-on: ubuntu-latest
    needs:
      - eicrecon-gun
      - eicrecon-dis
    container:
      image: alpine:latest
      volumes:
        - /home/runner/work/_temp:/home/runner/work/_temp
      # FIXME hard-coded: see https://github.com/actions/upload-pages-artifact/pull/14
    steps:
      - uses: actions/checkout@v3
      - name: Copy docs
        run: |
          cp -r docs publishing_docs
      - name: Run Doxygen
        if: github.ref_name == 'main'
        run: |
          apk add doxygen graphviz ttf-freefont
          doxygen Doxyfile
          mv html publishing_docs/doxygen
      - uses: actions/download-artifact@v3
        with:
          name: jana.dot
          path: publishing_docs/dot/
      - uses: actions/upload-artifact@v3
        with:
          name: docs
          path: publishing_docs/
          if-no-files-found: error

  list-open-prs:
    runs-on: ubuntu-latest
    outputs:
      json: ${{ steps.remap.outputs.json }}
    steps:
      - uses: octokit/request-action@v2.x
        id: query
        with:
          route: GET /repos/${{ github.repository }}/pulls?state=open
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Remap open PRs
        id: remap
        uses: nickofthyme/object-remap@v2
        with:
          include.*.pr: ${{ toJSON(fromJSON(steps.query.outputs.data).*.number) }}

  get-docs-from-open-prs:
    runs-on: ubuntu-latest
    needs:
      - build-docs
      - list-open-prs
    strategy:
      matrix: ${{ fromJSON(needs.list-open-prs.outputs.json) }}
      fail-fast: false
      max-parallel: 4
    steps:
      - uses: dawidd6/action-download-artifact@v2
        if: github.event.pull_request.number != matrix.pr
        with:
          pr: ${{ matrix.pr }}
          path: publishing_docs/pr/${{ matrix.pr }}/
          name: docs
          if_no_artifact_found: ignore
      - uses: actions/download-artifact@v3
        if: github.event.pull_request.number == matrix.pr
        with:
          name: docs
          path: publishing_docs/pr/${{ matrix.pr }}/
      - run: rm -rf publishing_docs/pr/*/doxygen
      - uses: actions/upload-artifact@v3
        with:
          name: github-pages-staging
          path: publishing_docs/
          if-no-files-found: ignore

  get-docs-from-main:
    runs-on: ubuntu-latest
    needs:
      - build-docs
    steps:
      - uses: dawidd6/action-download-artifact@v2
        if: github.ref_name != 'main'
        with:
          branch: main
          path: publishing_docs/
          name: docs
          if_no_artifact_found: fail
      - uses: actions/download-artifact@v3
        if: github.ref_name == 'main'
        with:
          name: docs
          path: publishing_docs/
      - uses: actions/upload-artifact@v3
        with:
          name: github-pages-staging
          path: publishing_docs/
          if-no-files-found: error

  collect-docs:
    runs-on: ubuntu-latest
    needs:
      - get-docs-from-main
      - get-docs-from-open-prs
    container:
      image: alpine:latest
      volumes:
        - /home/runner/work/_temp:/home/runner/work/_temp
      # FIXME hard-coded: see https://github.com/actions/upload-pages-artifact/pull/14
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: github-pages-staging
          path: publishing_docs/
      - run:
          apk add tar bash
        # FIXME bash not really required: see https://github.com/actions/upload-pages-artifact/pull/14
      - uses: actions/upload-pages-artifact@v1
        with:
          path: publishing_docs/
          retention-days: 7

  deploy-docs:
    needs:
      - collect-docs
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
