name: Build against eic-shell

on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - CC: gcc
            CXX: g++
            CMAKE_BUILD_TYPE: Release
          - CC: clang
            CXX: clang++
            CMAKE_BUILD_TYPE: Release
          - CC: gcc
            CXX: g++
            CMAKE_BUILD_TYPE: Debug
    steps:
    - uses: actions/checkout@v3
    - name: Prepare ccache timestamp
      id: ccache_cache_timestamp
      run: |
        echo "timestamp=$(date --iso-8601=minutes)" >> $GITHUB_OUTPUT
    - name: Retrieve ccache cache files
      uses: actions/cache@v3
      with:
        path: .ccache
        key: ccache-${{ matrix.CC }}-${{ matrix.CMAKE_BUILD_TYPE }}-${{ github.ref_name }}-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
        restore-keys: |
             ccache-${{ matrix.CC }}-${{ matrix.CMAKE_BUILD_TYPE }}-${{ github.ref_name }}-
             ccache-${{ matrix.CC }}-${{ matrix.CMAKE_BUILD_TYPE }}-
             ccache-${{ matrix.CC }}-
             ccache-
    - name: Configure ccache
      run: |
        mkdir -p ~/.ccache/
        echo "cache_dir=${{ github.workspace }}/.ccache" > ~/.ccache/ccache.conf
        echo "max_size=500MB" >> ~/.ccache/ccache.conf
        echo "compression=true" >> ~/.ccache/ccache.conf
    - uses: cvmfs-contrib/github-action-cvmfs@v3
    - name: Build and install
      uses: eic/run-cvmfs-osg-eic-shell@main
      with:
        platform-release: "jug_xl:nightly"
        run: |
          # install this repo
          CC=${{ matrix.CC }} CXX=${{ matrix.CXX }} cmake -B build -S . -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_BUILD_TYPE=${{ matrix.CMAKE_BUILD_TYPE }}
          cmake --build build -- -j 2 install
    - uses: actions/upload-artifact@v3
      with:
        name: install-${{ matrix.CC }}-eic-shell-${{ matrix.CMAKE_BUILD_TYPE }}
        path: |
          .
          !src/
          !build/
          !apt_cache/
          !.git/
          !.ccache/
        if-no-files-found: error
    - uses: actions/upload-artifact@v3
      with:
        name: build-${{ matrix.CC }}-eic-shell-${{ matrix.CMAKE_BUILD_TYPE }}
        path: |
          build/
        if-no-files-found: error

  clang-tidy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - run: echo "FETCH_DEPTH=$(( ${{ github.event.pull_request.commits }} + 1 ))" >> "${GITHUB_ENV}"
    - uses: actions/checkout@v3
      with:
        fetch-depth: ${{ env.FETCH_DEPTH }}
    - uses: cvmfs-contrib/github-action-cvmfs@v3
    - uses: actions/download-artifact@v3
      with:
        name: build-clang-eic-shell-Release
        path: build/
    - uses: eic/run-cvmfs-osg-eic-shell@main
      if: ${{ github.event_name == 'pull_request'}}
      with:
        platform-release: "jug_xl:nightly"
        run: |
          git diff ${{github.event.pull_request.base.sha}} | clang-tidy-diff -p 1 -path build -quiet -export-fixes clang_tidy_fixes.yml -extra-arg='-std=c++17' -clang-tidy-binary run-clang-tidy
    - uses: eic/run-cvmfs-osg-eic-shell@main
      if: ${{ github.event_name == 'push'}}
      with:
        platform-release: "jug_xl:nightly"
        run: |
          run-clang-tidy -p build -export-fixes clang_tidy_fixes.yml -extra-arg='-std=c++17'
    - uses: actions/upload-artifact@v3
      with:
        name: clang-tidy-fixes.yml
        path: clang_tidy_fixes.yml

  ddsim-gun:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        particle: [pi, e]
        detector_config: [arches, brycecanyon]
    steps:
    - uses: cvmfs-contrib/github-action-cvmfs@v3
    - name: Get detector info
      id: detector_info
      run: |
        grep epic/nightly /cvmfs/singularity.opensciencegrid.org/eicweb/jug_xl\:nightly/etc/jug_info | sed 's/.*: .*-\(.*\)/hash=\1/g' >> $GITHUB_OUTPUT
    - name: Retrieve simulation files
      id: retrieve_simulation_files
      uses: actions/cache@v3
      with:
        path: sim_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4hep.root
        key: sim_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4hep.root-${{ steps.detector_info.outputs.hash }}
    - name: Produce simulation files
      uses: eic/run-cvmfs-osg-eic-shell@main
      if: steps.retrieve_simulation_files.outputs.cache-hit != 'true'
      with:
        platform-release: "jug_xl:nightly"
        setup: /opt/detector/setup.sh
        run: |
          ddsim --compactFile ${DETECTOR_PATH}/${DETECTOR}_${{ matrix.detector_config }}.xml -G --gun.particle "${{ matrix.particle }}-" --gun.momentumMin "1*GeV" --gun.momentumMax "20*GeV" --gun.distribution "uniform" -N 100 --outputFile sim_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4hep.root
    - uses: actions/upload-artifact@v3
      with:
        name: sim_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4hep.root
        path: sim_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4hep.root
        if-no-files-found: error

  ddsim-dis:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        beam: [5x41, 10x100, 18x275]
        minq2: [1, 1000]
        detector_config: [arches, brycecanyon]
        exclude:
        - beam: 5x41
          minq2: 1000
    steps:
    - uses: cvmfs-contrib/github-action-cvmfs@v3
    - name: Get detector info
      id: detector_info
      run: |
        grep epic/nightly /cvmfs/singularity.opensciencegrid.org/eicweb/jug_xl\:nightly/etc/jug_info | sed 's/.*: .*-\(.*\)/hash=\1/g' >> $GITHUB_OUTPUT
    - name: Retrieve simulation files
      id: retrieve_simulation_files
      uses: actions/cache@v3
      with:
        path: sim_dis_${{matrix.beam}}_minQ2=${{matrix.minq2}}_${{ matrix.detector_config }}.edm4hep.root
        key: sim_dis_${{matrix.beam}}_minQ2=${{matrix.minq2}}_${{ matrix.detector_config }}.edm4hep.root-${{ steps.detector_info.outputs.hash }}
    - name: Produce simulation files
      uses: eic/run-cvmfs-osg-eic-shell@main
      if: steps.retrieve_simulation_files.outputs.cache-hit != 'true'
      with:
        platform-release: "jug_xl:nightly"
        setup: /opt/detector/setup.sh
        run: |
          url=root://dtn-eic.jlab.org//work/eic2/EPIC/EVGEN/DIS/NC/${{matrix.beam}}/minQ2=${{matrix.minq2}}/pythia8NCDIS_${{matrix.beam}}_minQ2=${{matrix.minq2}}_beamEffects_xAngle=-0.025_hiDiv_1.hepmc3.tree.root
          ddsim --compactFile ${DETECTOR_PATH}/${DETECTOR}_${{ matrix.detector_config }}.xml -N 100 --inputFiles ${url} --outputFile sim_dis_${{matrix.beam}}_minQ2=${{matrix.minq2}}_${{ matrix.detector_config }}.edm4hep.root
    - uses: actions/upload-artifact@v3
      with:
        name: sim_dis_${{matrix.beam}}_minQ2=${{matrix.minq2}}_${{ matrix.detector_config }}.edm4hep.root
        path: sim_dis_${{matrix.beam}}_minQ2=${{matrix.minq2}}_${{ matrix.detector_config }}.edm4hep.root
        if-no-files-found: error

  valgrind-memcheck-eicrecon-gcc:
    runs-on: ubuntu-latest
    needs:
    - build
    - ddsim-gun
    strategy:
      matrix:
        particle: [pi]
        detector_config: [arches, brycecanyon]
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: install-gcc-eic-shell-Debug
    - uses: actions/download-artifact@v3
      with:
        name: sim_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4hep.root
    - uses: cvmfs-contrib/github-action-cvmfs@v3
    - name: Run EICrecon under valgrind
      uses: eic/run-cvmfs-osg-eic-shell@main
      with:
        platform-release: "jug_xl:nightly"
        setup: /opt/detector/setup.sh
        run: |
          export DETECTOR_CONFIG=${DETECTOR}_${{ matrix.detector_config }}
          export JANA_PLUGIN_PATH=$PWD/lib/EICrecon/plugins${JANA_PLUGIN_PATH:+:${JANA_PLUGIN_PATH}}
          chmod a+x bin/*
          valgrind --tool=memcheck --track-origins=yes --leak-check=full --log-file=valgrind-memcheck-eicrecon-${{ matrix.particle }}-${{ matrix.detector_config }}.log --suppressions=/usr/local/etc/root/valgrind-root.supp $PWD/bin/eicrecon -Ppodio:output_file=rec_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4eic.root sim_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4hep.root -Pplugins=dump_flags,janadot -Pjana:timeout=0 -Pjana:warmup_timeout=0 -Pdump_flags:json=${{ matrix.detector_config }}_flags.json
    - uses: actions/upload-artifact@v3
      with:
        name: valgrind-memcheck-eicrecon-${{ matrix.particle }}-${{ matrix.detector_config }}.log
        path: valgrind-memcheck-eicrecon-${{ matrix.particle }}-${{ matrix.detector_config }}.log
        if-no-files-found: error

  eicrecon-gcc-gun:
    runs-on: ubuntu-latest
    needs:
    - build
    - ddsim-gun
    strategy:
      matrix:
        particle: [pi, e]
        detector_config: [arches, brycecanyon]
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: install-gcc-eic-shell-Release
    - uses: actions/download-artifact@v3
      with:
        name: sim_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4hep.root
    - uses: cvmfs-contrib/github-action-cvmfs@v3
    - name: Run EICrecon
      uses: eic/run-cvmfs-osg-eic-shell@main
      with:
        platform-release: "jug_xl:nightly"
        setup: /opt/detector/setup.sh
        run: |
          export DETECTOR_CONFIG=${DETECTOR}_${{ matrix.detector_config }}
          export JANA_PLUGIN_PATH=$PWD/lib/EICrecon/plugins${JANA_PLUGIN_PATH:+:${JANA_PLUGIN_PATH}}
          chmod a+x bin/*
          $PWD/bin/eicrecon -Ppodio:output_file=rec_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4eic.root sim_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4hep.root -Pplugins=dump_flags,janadot -Pdump_flags:json=${{ matrix.particle }}_${{ matrix.detector_config }}_flags.json
    - uses: actions/upload-artifact@v3
      with:
        name: eicrecon_rec_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4eic.root
        path: rec_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4eic.root
        if-no-files-found: error
    - uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.particle }}_${{ matrix.detector_config }}_flags.json
        path: ${{ matrix.particle }}_${{ matrix.detector_config }}_flags.json
        if-no-files-found: error
    - uses: actions/upload-artifact@v3
      with:
        name: eicrecon_rec_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.dot
        path: jana.dot
        if-no-files-found: error

  eicrecon-gcc-dis:
    runs-on: ubuntu-latest
    needs:
    - build
    - ddsim-dis
    strategy:
      matrix:
        beam: [5x41, 10x100, 18x275]
        minq2: [1, 1000]
        detector_config: [arches, brycecanyon]
        exclude:
        - beam: 5x41
          minq2: 1000
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: install-gcc-eic-shell-Release
    - uses: actions/download-artifact@v3
      with:
        name: sim_dis_${{matrix.beam}}_minQ2=${{matrix.minq2}}_${{ matrix.detector_config }}.edm4hep.root
    - uses: cvmfs-contrib/github-action-cvmfs@v3
    - name: Run EICrecon
      uses: eic/run-cvmfs-osg-eic-shell@main
      with:
        platform-release: "jug_xl:nightly"
        setup: /opt/detector/setup.sh
        run: |
          export DETECTOR_CONFIG=${DETECTOR}_${{ matrix.detector_config }}
          export JANA_PLUGIN_PATH=$PWD/lib/EICrecon/plugins${JANA_PLUGIN_PATH:+:${JANA_PLUGIN_PATH}}
          chmod a+x bin/*
          $PWD/bin/eicrecon -Ppodio:output_file=rec_dis_${{matrix.beam}}_${{ matrix.detector_config }}.edm4eic.root sim_dis_${{matrix.beam}}_minQ2=${{matrix.minq2}}_${{ matrix.detector_config }}.edm4hep.root -Pplugins=janadot
    - uses: actions/upload-artifact@v3
      with:
        name: rec_dis_${{matrix.beam}}_minQ2=${{matrix.minq2}}_${{ matrix.detector_config }}.edm4eic.root
        path: rec_dis_${{matrix.beam}}_${{ matrix.detector_config }}.edm4eic.root
        if-no-files-found: error
    - uses: actions/upload-artifact@v3
      with:
        name: rec_dis_${{matrix.beam}}_minQ2=${{matrix.minq2}}_${{ matrix.detector_config }}.dot
        path: jana.dot
        if-no-files-found: error

  # build-docs and deploy-docs copy doxygen.yml functionality
  # the difference is that these jobs use resulting artifacts from EICrecon runs
  # to embed into docs
  build-docs-advanced:
    runs-on: ubuntu-latest
    container:
      image: alpine:latest
      volumes:
        - /home/runner/work/_temp:/home/runner/work/_temp
      # FIXME hard-coded: see https://github.com/actions/upload-pages-artifact/pull/14
    steps:
      - uses: actions/checkout@v3
      - name: Run Doxygen
        run: |
          apk add doxygen graphviz
          doxygen Doxyfile
          cp -r docs publishing_docs
          mv html publishing_docs/doxygen
      - uses: actions/upload-artifact@v3
        with:
          name: docs
          path: publishing_docs/
          if-no-files-found: error
      - run:
          apk add tar bash
        # FIXME bash not really required: see https://github.com/actions/upload-pages-artifact/pull/14
      - uses: actions/upload-pages-artifact@v1
        if: github.ref == 'refs/heads/main'
        with:
          path: publishing_docs/
          retention-days: 7

  deploy-docs-advanced:
    needs: build-docs-advanced
    if: github.ref == 'refs/heads/main'
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
